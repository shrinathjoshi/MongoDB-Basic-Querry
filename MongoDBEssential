

Mongodb basic Tutorial

==> Instead of table as we use in sql we use Documents ,these documents are structured in BSON similar to json

==> It is a NoSql database we cant use joins 


1. It is easy to make iteration on schema
2. More scalable and gives better performance
3. Object Oriented 



Document :-
A record in a Mongodb collection and the basic unit of data in Mongodb. 
Documents look like JSON  objects but exist as BSON


Collection:
A grouping of Mongodb documents. Typically all documents in a collections have a similar or related purpose.


//To insert into database
db.cars.insert({
	
	name: 'Honda',
	make: 'accord',
	year: '2010'
})



//To update a document
db.cars.update({
	name: 'Honda'
},
{
	$set:{
	name:'Ford'
	}
}
)


// to add new Fields in a Document
db.cars.update({
	name: 'Ford'
},
{
	$set:{
	transmission:'Automatic'
	}
},{
	$upsert:true
}
)



//To delete a data document
db.cars.remove({name: "Ford"})



//We can write Code inside mongo shell 
for(var i=0;i<=10;i++){ db.cars.insert({ x:i});}
WriteResult({ "nInserted" : 1 })
> db.cars.find().pretty();
{
        "_id" : ObjectId("5a6c7b73893f4638e69d1cc7"),
        "name" : "Ford",
        "make" : "accord",
        "year" : "2010",
        "transmission" : "Automatic"
}
{ "_id" : ObjectId("5a6c7d59893f4638e69d1cc8"), "x" : 0 }
{ "_id" : ObjectId("5a6c7d59893f4638e69d1cc9"), "x" : 1 }
{ "_id" : ObjectId("5a6c7d59893f4638e69d1cca"), "x" : 2 }
{ "_id" : ObjectId("5a6c7d59893f4638e69d1ccb"), "x" : 3 }
{ "_id" : ObjectId("5a6c7d59893f4638e69d1ccc"), "x" : 4 }
{ "_id" : ObjectId("5a6c7d59893f4638e69d1ccd"), "x" : 5 }
{ "_id" : ObjectId("5a6c7d59893f4638e69d1cce"), "x" : 6 }
{ "_id" : ObjectId("5a6c7d59893f4638e69d1ccf"), "x" : 7 }
{ "_id" : ObjectId("5a6c7d59893f4638e69d1cd0"), "x" : 8 }
{ "_id" : ObjectId("5a6c7d59893f4638e69d1cd1"), "x" : 9 }
{ "_id" : ObjectId("5a6c7d59893f4638e69d1cd2"), "x" : 10 }
>




//To remove documnets through code in mongo shell
for(var i=0;i<=10;i++){ db.cars.remove({ x:i});}
WriteResult({ "nRemoved" : 1 })
> db.cars.find().pretty();
{
        "_id" : ObjectId("5a6c7b73893f4638e69d1cc7"),
        "name" : "Ford",
        "make" : "accord",
        "year" : "2010",
        "transmission" : "Automatic"
}
{
        "_id" : ObjectId("5a6c7e83893f4638e69d1cd3"),
        "name" : "Honda",
        "make" : "Corta",
        "year" : "2012",
        "cost" : "12,00,000"
}
{
        "_id" : ObjectId("5a6c7ea2893f4638e69d1cd4"),
        "name" : "Mahindra",
        "make" : "Xylo",
        "year" : "2015",
        "cost" : "15,00,000"
}
{
        "_id" : ObjectId("5a6c7ec1893f4638e69d1cd5"),
        "name" : "Maruti",
        "make" : "Ritz",
        "year" : "2015",
        "cost" : "10,00,000"
}
{
        "_id" : ObjectId("5a6c7eeb893f4638e69d1cd6"),
        "name" : "Maruthi",
        "make" : "WaganR",
        "year" : "2017",
        "cost" : "5,00,000"
}






//To find using a particular field.
> db.cars.find({make: "Xylo"}).pretty();
{
        "_id" : ObjectId("5a6c7ea2893f4638e69d1cd4"),
        "name" : "Mahindra",
        "make" : "Xylo",
        "year" : "2015",
        "cost" : "15,00,000"
}
> db.cars.find({year:{$gt:2014}}).pretty();
> db.cars.find({year:{$lt:2014}}).pretty();
> db.cars.find({cost:{$gt:10,00,000}}).pretty();
2018-01-27T19:07:44.328+0530 E QUERY    [thread1] SyntaxError: missing : after property id @(shell):1:29



// To print record with cost greater than 10,00,000 
> db.cars.find({cost:{$gt:'10,00,000'}}).pretty();
{
        "_id" : ObjectId("5a6c7e83893f4638e69d1cd3"),
        "name" : "Honda",
        "make" : "Corta",
        "year" : "2012",
        "cost" : "12,00,000"
}
{
        "_id" : ObjectId("5a6c7ea2893f4638e69d1cd4"),
        "name" : "Mahindra",
        "make" : "Xylo",
        "year" : "2015",
        "cost" : "15,00,000"
}
{
        "_id" : ObjectId("5a6c7eeb893f4638e69d1cd6"),
        "name" : "Maruthi",
        "make" : "WaganR",
        "year" : "2017",
        "cost" : "5,00,000"
}




// To print records with year less than 2014
> db.cars.find({year:{$lt:'2014'}}).pretty();
{
        "_id" : ObjectId("5a6c7b73893f4638e69d1cc7"),
        "name" : "Ford",
        "make" : "accord",
        "year" : "2010",
        "transmission" : "Automatic"
}
{
        "_id" : ObjectId("5a6c7e83893f4638e69d1cd3"),
        "name" : "Honda",
        "make" : "Corta",
        "year" : "2012",
        "cost" : "12,00,000"
}


// To print records with year greater than 2014
> db.cars.find({year:{$gt:'2014'}}).pretty();
{
        "_id" : ObjectId("5a6c7ea2893f4638e69d1cd4"),
        "name" : "Mahindra",
        "make" : "Xylo",
        "year" : "2015",
        "cost" : "15,00,000"
}
{
        "_id" : ObjectId("5a6c7ec1893f4638e69d1cd5"),
        "name" : "Maruti",
        "make" : "Ritz",
        "year" : "2015",
        "cost" : "10,00,000"
}
{
        "_id" : ObjectId("5a6c7eeb893f4638e69d1cd6"),
        "name" : "Maruthi",
        "make" : "WaganR",
        "year" : "2017",
        "cost" : "5,00,000"
}


// to print record with make as Xylo
> db.cars.find({make:{$in:['Xylo']}}).pretty();
{
        "_id" : ObjectId("5a6c7ea2893f4638e69d1cd4"),
        "name" : "Mahindra",
        "make" : "Xylo",
        "year" : "2015",
        "cost" : "15,00,000"
}



> db.cars.find().sort();pretty()
2018-01-27T19:12:18.631+0530 E QUERY    [thread1] ReferenceError: pretty is not defined :
@(shell):1:23
> db.cars.find().sort().pretty()
Error: error: {
        "ok" : 0,
        "errmsg" : "Failed to parse: sort: undefined. 'sort' field must be of BSON type object.",
        "code" : 9,
        "codeName" : "FailedToParse"
}

// to sort records based on its units
// 1 = sort in Descending order
// -1 = sort in Ascending order

> db.cars.find().sort({units:1}).pretty()
{
        "_id" : ObjectId("5a6c7b73893f4638e69d1cc7"),
        "name" : "Ford",
        "make" : "accord",
        "year" : "2010",
        "transmission" : "Automatic"
}
{
        "_id" : ObjectId("5a6c7e83893f4638e69d1cd3"),
        "name" : "Honda",
        "make" : "Corta",
        "year" : "2012",
        "cost" : "12,00,000"
}
{
        "_id" : ObjectId("5a6c7ea2893f4638e69d1cd4"),
        "name" : "Mahindra",
        "make" : "Xylo",
        "year" : "2015",
        "cost" : "15,00,000"
}
{
        "_id" : ObjectId("5a6c7ec1893f4638e69d1cd5"),
        "name" : "Maruti",
        "make" : "Ritz",
        "year" : "2015",
        "cost" : "10,00,000"
}
{
        "_id" : ObjectId("5a6c7eeb893f4638e69d1cd6"),
        "name" : "Maruthi",
        "make" : "WaganR",
        "year" : "2017",
        "cost" : "5,00,000"
}

//To change name=" Maruthi " to "Maruti"
> db.cars.update({name:"Maruthi"},{$set:{name:"Maruti"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.cars.find().pretty();
{
        "_id" : ObjectId("5a6c7b73893f4638e69d1cc7"),
        "name" : "Ford",
        "make" : "accord",
        "year" : "2010",
        "transmission" : "Automatic"
}
{
        "_id" : ObjectId("5a6c7e83893f4638e69d1cd3"),
        "name" : "Honda",
        "make" : "Corta",
        "year" : "2012",
        "cost" : "12,00,000"
}
{
        "_id" : ObjectId("5a6c7ea2893f4638e69d1cd4"),
        "name" : "Mahindra",
        "make" : "Xylo",
        "year" : "2015",
        "cost" : "15,00,000"
}
{
        "_id" : ObjectId("5a6c7ec1893f4638e69d1cd5"),
        "name" : "Maruti",
        "make" : "Ritz",
        "year" : "2015",
        "cost" : "10,00,000"
}
{
        "_id" : ObjectId("5a6c7eeb893f4638e69d1cd6"),
        "name" : "Maruti",
        "make" : "WaganR",
        "year" : "2017",
        "cost" : "5,00,000"
}


// to find all records with name="Maruti"
> db.cars.find({name:{$in:['Maruti']}}).pretty();
{
        "_id" : ObjectId("5a6c7ec1893f4638e69d1cd5"),
        "name" : "Maruti",
        "make" : "Ritz",
        "year" : "2015",
        "cost" : "10,00,000"
}
{
        "_id" : ObjectId("5a6c7eeb893f4638e69d1cd6"),
        "name" : "Maruti",
        "make" : "WaganR",
        "year" : "2017",
        "cost" : "5,00,000"
}

// to sort all the records with name ="Maruti" based on Cost in Descending order
> db.cars.find({name:{$in:['Maruti']}}).sort({units:1}).pretty();
{
        "_id" : ObjectId("5a6c7ec1893f4638e69d1cd5"),
        "name" : "Maruti",
        "make" : "Ritz",
        "year" : "2015",
        "cost" : "10,00,000"
}
{
        "_id" : ObjectId("5a6c7eeb893f4638e69d1cd6"),
        "name" : "Maruti",
        "make" : "WaganR",
        "year" : "2017",
        "cost" : "5,00,000"
}


// to sort all the records with name ="Maruti" based on Cost in Descending order
> db.cars.find({name:{$in:['Maruti']}}).sort({cost:-1}).pretty();
{
        "_id" : ObjectId("5a6c7eeb893f4638e69d1cd6"),
        "name" : "Maruti",
        "make" : "WaganR",
        "year" : "2017",
        "cost" : "5,00,000"
}
{
        "_id" : ObjectId("5a6c7ec1893f4638e69d1cd5"),
        "name" : "Maruti",
        "make" : "Ritz",
        "year" : "2015",
        "cost" : "10,00,000"
}


//Sort based on year 
> db.cars.find().sort({year:-1}).pretty();
{
        "_id" : ObjectId("5a6c7eeb893f4638e69d1cd6"),
        "name" : "Maruti",
        "make" : "WaganR",
        "year" : "2017",
        "cost" : "5,00,000"
}
{
        "_id" : ObjectId("5a6c7ea2893f4638e69d1cd4"),
        "name" : "Mahindra",
        "make" : "Xylo",
        "year" : "2015",
        "cost" : "15,00,000"
}
{
        "_id" : ObjectId("5a6c7ec1893f4638e69d1cd5"),
        "name" : "Maruti",
        "make" : "Ritz",
        "year" : "2015",
        "cost" : "10,00,000"
}
{
        "_id" : ObjectId("5a6c7e83893f4638e69d1cd3"),
        "name" : "Honda",
        "make" : "Corta",
        "year" : "2012",
        "cost" : "12,00,000"
}
{
        "_id" : ObjectId("5a6c7b73893f4638e69d1cc7"),
        "name" : "Ford",
        "make" : "accord",
        "year" : "2010",
        "transmission" : "Automatic"
}

// To limit the number of record.
> db.cars.find().sort({cost:-1}).pretty().limit(2);
{
        "_id" : ObjectId("5a6c7eeb893f4638e69d1cd6"),
        "name" : "Maruti",
        "make" : "WaganR",
        "year" : "2017",
        "cost" : "5,00,000"
}
{
        "_id" : ObjectId("5a6c7ea2893f4638e69d1cd4"),
        "name" : "Mahindra",
        "make" : "Xylo",
        "year" : "2015",
        "cost" : "15,00,000"
}
>






























































































































































































































































































